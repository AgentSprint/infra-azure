name: New Infra (POC)

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client Name to deploy'
        required: true
        type: string
      client_code:
        description: 'Client code to deploy'
        required: true
        type: string
      location:
        description: 'Location to deploy the client code'
        required: true
        type: string
      issue_api_url:
        description: 'URL of the issue to update'
        required: true
        type: string

permissions:
  contents: read
  issues: write   # required to comment

  # (NEW) prevent concurrent runs for the same client
concurrency:
  group: infra-${{ inputs.client_code }}
  cancel-in-progress: false
jobs:
  deploy:
    runs-on: ubuntu-latest

    # (NEW) safer defaults for all bash steps
    defaults:
      run:
        shell: bash

    env:
      ARM_CLIENT_ID:        ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET:    ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID:        ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
      GH_TOKEN:             ${{ secrets.GH_TOKEN }}

    steps:
      - name: Compute run URL
        id: runurl
        run: |
          set -euo pipefail
          echo "RUN_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> "$GITHUB_ENV"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Using PAT for push is fine; otherwise set permissions for GITHUB_TOKEN
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      # (NEW) sanitize inputs for safe branch/paths
      - name: Sanitize inputs
        id: sanitize
        run: |
          set -euo pipefail
          clean_code="$(printf '%s' "${{ inputs.client_code }}" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9._-/' '-' )"
          clean_name="$(printf '%s' "${{ inputs.client_name }}" | tr -cs '[:alnum:] _.-' '-' )"
          echo "code=$clean_code" >> "$GITHUB_OUTPUT"
          echo "name=$clean_name" >> "$GITHUB_OUTPUT"

      - name: Comment back to the request issue
        uses: AgentSprint/utils-actions/issues/comment-on@main
        with:
          issue_api_url: ${{ inputs.issue_api_url }}
          body: |
            ‚úÖ Infra workflow received values:
            - client_name: ${{ steps.sanitize.outputs.name }}
            - client_code: ${{ steps.sanitize.outputs.code }}
            - location: ${{ inputs.location }}
            Next action: Deploy the client code to the specified location  
            üîó Run: ${{ env.RUN_URL }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Create branch for client
        run: |
          set -euo pipefail
          git checkout -b "adding_new_client_${{ steps.sanitize.outputs.code }}"

      - name: Ensure clients/<client_name> folder exists
        run: |
          set -euo pipefail
          mkdir -p "clients/${{ steps.sanitize.outputs.name }}"

      - name: Write tfvars file (idempotent)
        run: |
          set -euo pipefail
          cat > "clients/${{ steps.sanitize.outputs.name }}/${{ steps.sanitize.outputs.code }}.tfvars" <<EOF
          # terraform.tfvars
          client_code = "${{ steps.sanitize.outputs.code }}"
          location    = "${{ inputs.location }}"
          EOF

      - name: Check git status
        id: git_status
        run: |
          set -euo pipefail
          if git diff --quiet && git diff --cached --quiet; then
            echo "clean=true" >> "$GITHUB_OUTPUT"
          else
            echo "clean=false" >> "$GITHUB_OUTPUT"
          fi

      # If clean, close the issue and end successfully
      - name: Update issue (infra already exists)
        if: steps.git_status.outputs.clean == 'true'
        uses: AgentSprint/utils-actions/issues/comment-on@main
        with:
          issue_api_url: ${{ inputs.issue_api_url }}
          body: |
            ‚úÖ Infra already exists ‚Äî no changes required.
          token: ${{ secrets.GH_TOKEN }}

      - name: Close request issue
        if: steps.git_status.outputs.clean == 'true'
        uses: AgentSprint/utils-actions/issues/close@main
        with:
          issue_api_url: ${{ inputs.issue_api_url }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Stop job (no changes)
        if: steps.git_status.outputs.clean == 'true'
        run: exit 0

      - name: Commit and push branch
        id: git_commit_push
        run: |
          set -euo pipefail
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Add new client ${{ steps.sanitize.outputs.name }} with code ${{ steps.sanitize.outputs.code }}"
          git push --set-upstream origin "adding_new_client_${{ steps.sanitize.outputs.code }}"

      - name: Update issue (branch created)
        uses: AgentSprint/utils-actions/issues/comment-on@main
        with:
          issue_api_url: ${{ inputs.issue_api_url }}
          body: |
            ‚úÖ Branch created and pushed: `adding_new_client_${{ steps.sanitize.outputs.code }}`
          token: ${{ secrets.GH_TOKEN }}

      - name: Create pull request
        id: create_pr
        uses: AgentSprint/utils-actions/pull_request/create@main
        with:
          owner: "AgentSprint"
          repo: "infra-azure"
          title: "Add new client :${{ steps.sanitize.outputs.name }} (${{ steps.sanitize.outputs.code }})"
          issue_api_url: ${{ inputs.issue_api_url }}
          client_name: ${{ steps.sanitize.outputs.name }}
          client_code: ${{ steps.sanitize.outputs.code }}
          location: ${{ inputs.location }}
          tfvars_filepath: "clients/${{ steps.sanitize.outputs.name }}/${{ steps.sanitize.outputs.code }}.tfvars"
          base: main
          head: "adding_new_client_${{ steps.sanitize.outputs.code }}"
          token: ${{ secrets.GH_TOKEN }}

      - name: Update issue (PR created)
        uses: AgentSprint/utils-actions/issues/comment-on@main
        with:
          issue_api_url: ${{ inputs.issue_api_url }}
          body: |
            ‚úÖ Pull request created: ${{ steps.create_pr.outputs.pr_url }}
          token: ${{ secrets.GH_TOKEN }}

      # (NEW) Terraform lint & validate
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: terraform fmt (check)
        working-directory: terraform
        run: terraform fmt -check

      - name: terraform validate
        working-directory: terraform
        run: terraform validate

      - name: terraform init
        working-directory: terraform
        run: terraform init

      # Capture explicit exit codes instead of relying on 'outcome'
      - name: terraform plan
        id: tfplan
        working-directory: terraform
        run: |
          set +e
          terraform plan -input=false -out=tfplan -var-file=../clients/${{ steps.sanitize.outputs.name }}/${{ steps.sanitize.outputs.code }}.tfvars
          echo "code=$?" >> "$GITHUB_OUTPUT"
          # Always succeed the step so we can branch later
          exit 0

      - name: terraform apply (from saved plan)
        id: tfapply
        working-directory: terraform
        run: |
          set +e
          # only attempt apply if plan succeeded
          if [ "${{ steps.tfplan.outputs.code }}" = "0" ]; then
            terraform apply -auto-approve tfplan
            echo "code=$?" >> "$GITHUB_OUTPUT"
          else
            echo "code=1" >> "$GITHUB_OUTPUT"
          fi
          exit 0

      - name: Report Terraform status to issue
        uses: AgentSprint/utils-actions/issues/comment-on@main
        with:
          issue_api_url: ${{ inputs.issue_api_url }}
          body: |
            üìù Terraform summary for **${{ steps.sanitize.outputs.code }}** @ **${{ inputs.location }}**:
            - Plan:  ${{ steps.tfplan.outputs.code == '0' && '‚úÖ Success' || '‚ùå Failed' }}
            - Apply: ${{ steps.tfapply.outputs.code == '0' && '‚úÖ Success' || '‚ùå Skipped/Failed' }}
            ${{ (steps.tfplan.outputs.code != '0' || steps.tfapply.outputs.code != '0') && format('üîó Run details: {0}', env.RUN_URL) || '' }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Cleanup branch on failure
        if: steps.tfplan.outputs.code != '0' || steps.tfapply.outputs.code != '0'
        uses: AgentSprint/utils-actions/repo/branch/delete@main
        with:
          owner: "AgentSprint"
          repo: "infra-azure"
          branch_name: "adding_new_client_${{ steps.sanitize.outputs.code }}"
          token: ${{ secrets.GH_TOKEN }}

      # Hard-fail the job if either step failed
      - name: Fail job if Terraform failed
        if: steps.tfplan.outputs.code != '0' || steps.tfapply.outputs.code != '0'
        run: exit 1

      - name: Merge pull request (only if BOTH succeeded)
        if: steps.tfplan.outputs.code == '0' && steps.tfapply.outputs.code == '0'
        uses: AgentSprint/utils-actions/pull_request/merge@main
        with:
          owner: "AgentSprint"
          repo: "infra-azure"
          pr_number: "${{ steps.create_pr.outputs.pr_number }}"
          token: ${{ secrets.GH_TOKEN }}

      - name: Update issue (PR merged)
        if: steps.tfplan.outputs.code == '0' && steps.tfapply.outputs.code == '0'
        uses: AgentSprint/utils-actions/issues/comment-on@main
        with:
          issue_api_url: ${{ inputs.issue_api_url }}
          body: |
            ‚úÖ Pull request merged.
          token: ${{ secrets.GH_TOKEN }}

      - name: Delete branch after merge
        if: steps.tfplan.outputs.code == '0' && steps.tfapply.outputs.code == '0'
        uses: AgentSprint/utils-actions/repo/branch/delete@main
        with:
          owner: "AgentSprint"
          repo: "infra-azure"
          branch_name: "adding_new_client_${{ steps.sanitize.outputs.code }}"
          token: ${{ secrets.GH_TOKEN }}

      - name: Close request issue (success path)
        if: steps.tfplan.outputs.code == '0' && steps.tfapply.outputs.code == '0'
        uses: AgentSprint/utils-actions/issues/close@main
        with:
          issue_api_url: ${{ inputs.issue_api_url }}
          token: ${{ secrets.GH_TOKEN }}